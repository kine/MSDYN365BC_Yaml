# File: .vsts-ci.yml
#
# Author: Kamil (Kine) Sacek
#
# To use, place this file into root of your git repository and push to the Azure DevOps repository.
# Build pipeline will be created automagically and will build your app.
#
# Prerequisities:
#   Service connection with name "GitHub" leading to GitHub in your Azure DevOps Project.
#   If the service connection have another name, change the name in "endpoint:" line.
#
#   To use CodeSigning Certificate, You can place it to some shared folder and set the password for it.
#   If used on Agent with Domain, you can create certificate without password but secured with access for
#   specific users. In this case do not fill the CertPwd variable.
#

trigger:
- master

resources:
  repositories:
  - repository: MSDYN365BC_Yaml
    type: github
    name: kine/MSDYN365BC_Yaml
    ref: 'refs/heads/master'
    endpoint: GitHub
  - repository: self
    checkoutOptions:
      submodules: true

variables:
  Auth: 'Windows' # Windows or NavUserPassword
  CertFile: 'c:\Cert\CodeSigning.pfx' # Defines location of certificate if build agent is persistent. Can't be defined with CertSecret at the same time
  CertPwd: ''
  CertSecret: '' # If certificate has been imported to Azure Key Vault it can be linked here directly
  ConfigFolder: '' # Absolute path of the folder to store config.json
  ContainerName: 'BC' # Name of the Container
  ImageName: 'microsoft/bcsandbox'
  LicenseFile: '' # File can be located on agent machine or in Azure Key Vault
  TestCodeunitId: '130402'
  UserPwd: 'pass@word1'

queue:
  name: default
  demands: Docker

steps:
- checkout: self
  submodules: true

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.3.0'

- template: Templates/InstallModules.yml@MSDYN365BC_Yaml

- template: Templates/EnsureConfig.yml@MSDYN365BC_Yaml
  parameters:
    Auth: $(Auth)
    CertFile: $(CertFile)
    CertPwd: $(CertPwd)
    CertSecret: $(CertSecret)
    ConfigFolder: $(ConfigFolder)
    ContainerName: $(ContainerName)
    ImageName: $(ImageName)
    LicenseFile: $(LicenseFile)
    UserPwd: $(UserPwd)

- template: Templates/PrepareEnv.yml@MSDYN365BC_Yaml
  parameters:
    ConfigFolder: $(ConfigFolder)

- template: Templates/SetAppBuildNo.yml@MSDYN365BC_Yaml
  parameters:
    ConfigFolder: $(ConfigFolder)

- template: Templates/CompileALApps.yml@MSDYN365BC_Yaml
  parameters:
    ConfigFolder: $(ConfigFolder)

- template: Templates/InstallALApps.yml@MSDYN365BC_Yaml
  parameters:
    ConfigFolder: $(ConfigFolder)

- template: Templates/TestALApp.yml@MSDYN365BC_Yaml
  parameters:
    ConfigFolder: $(ConfigFolder)
    TrxFile: TestResults.trx
    TestCodeunitId: $(TestCodeunitId)

- task: PublishBuildArtifacts@1

  displayName: 'Publish Artifact: App'
  inputs:
    ArtifactName: App

- task: PublishTestResults@2

  displayName: 'Publish Test Results **\Test*.trx'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**\Test*.trx'
    searchFolder: '$(Common.TestResultsDirectory)'
  condition: succeededOrFailed()

- template: Templates/RemoveEnv.yml@MSDYN365BC_Yaml
  parameters:
    ConfigFolder: $(ConfigFolder)
